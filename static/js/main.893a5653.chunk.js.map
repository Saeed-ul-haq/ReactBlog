{"version":3,"sources":["components/Post/Post.js","containers/Blog/Posts/Posts.js","containers/Blog/NewPost/NewPost.js","containers/Blog/FullPost/FullPost.js","containers/Blog/Blog.js","App.js","serviceWorker.js","index.js"],"names":["withRouter","props","console","log","className","onClick","clicked","title","author","Posts","state","posts","selectedPostId","componentDidMount","Axios","get","then","response","updatePosts","data","slice","map","post","setState","catch","error","postSelectedHandler","id","history","push","this","to","key","Component","NewPost","content","submitted","postDataHandler","body","type","value","onChange","event","target","rows","FullPost","loadedPost","match","params","deletePostHandler","delete","style","textAlign","Blog","auth","exact","activeClassName","activeStyle","color","textDecoration","pathname","hash","search","path","component","from","render","App","Boolean","window","location","hostname","defaults","baseURL","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.893a5653.chunk.js","sourcesContent":["import React from 'react';\r\nimport { withRouter } from 'react-router-dom';\r\n\r\nimport './Post.css';\r\n\r\nconst post = (props) => {\r\n    console.log(props);\r\n    return (\r\n        <article className=\"Post\" onClick={props.clicked}>\r\n        <h1>{props.title}</h1>\r\n        <div className=\"Info\">\r\n            <div className=\"Author\">{props.author}</div>\r\n        </div>\r\n    </article>\r\n    );\r\n}\r\n\r\nexport default withRouter(post);","import React, {Component} from 'react';\r\nimport Axios from 'axios';\r\nimport Post from '../../../components/Post/Post';\r\nimport {Link } from 'react-router-dom';\r\nimport './Posts.css';\r\n\r\nclass Posts extends Component {\r\n\r\n    state = {\r\n        posts: [],\r\n        selectedPostId: null\r\n    }\r\n\r\n    componentDidMount = () =>{\r\n        Axios.get('/posts')\r\n        .then(response => {\r\n            const posts = response.data.slice(0,4);\r\n            const updatePosts = posts.map(post => {\r\n                return {\r\n                    ...post,\r\n                    author: 'Max'\r\n                }\r\n            });\r\n            this.setState({posts: updatePosts});\r\n\r\n        })\r\n        .catch(error => {\r\n            console.log(error);\r\n        });\r\n    }\r\n\r\n    postSelectedHandler = (id)=>{\r\n        // this.setState({\r\n        //     selectedPostId: id\r\n        // });\r\n\r\n        this.props.history.push('/' + id);\r\n    }\r\n    render(){\r\n\r\n        let post = this.state.posts.map((post) => {\r\n            return <Link to={'/post/' + post.id} key={post.id}><Post \r\n             \r\n            title={post.title} \r\n            author={post.author}\r\n            clicked={() => this.postSelectedHandler(post.id)} /></Link>\r\n         });\r\n\r\n        return (\r\n            <section className=\"Posts\">\r\n                    {post}\r\n            </section>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Posts;","import React, { Component } from 'react';\r\n\r\nimport './NewPost.css';\r\nimport Axios from 'axios';\r\nimport {  Redirect } from \"react-router-dom\";\r\n\r\n\r\nclass NewPost extends Component {\r\n    state = {\r\n        title: '',\r\n        content: '',\r\n        author: 'Max',\r\n        submitted: false\r\n    }\r\n\r\n    componentDidMount = () => {\r\n        // if unauth this.props.history.replace('/posts');\r\n    }\r\n\r\n    postDataHandler = () => {\r\n        const data = {\r\n            title: this.state.title,\r\n            body: this.state.content,\r\n            author: this.state.author\r\n        };\r\n        Axios.post('/posts',data)\r\n        .then(response => {\r\n\r\n            // console.log(response);\r\n            // this.setState({submitted: true});\r\n            this.props.history.push('/posts');\r\n        })\r\n        .catch(error => console.log(error));\r\n    }\r\n\r\n    render () {\r\n        let redirect = null;\r\n\r\n        if(this.state.submitted){\r\n            redirect= <Redirect to=\"/posts\" />\r\n        }\r\n        return (\r\n            <div className=\"NewPost\">\r\n                {/* {redirect} */}\r\n                <h1>Add a Post</h1>\r\n                <label>Title</label>\r\n                <input type=\"text\" value={this.state.title} onChange={(event) => this.setState({title: event.target.value})} />\r\n                <label>Content</label>\r\n                <textarea rows=\"4\" value={this.state.content} onChange={(event) => this.setState({content: event.target.value})} />\r\n                <label>Author</label>\r\n                <select value={this.state.author} onChange={(event) => this.setState({author: event.target.value})}>\r\n                    <option value=\"Max\">Max</option>\r\n                    <option value=\"Manu\">Manu</option>\r\n                </select>\r\n                <button onClick={this.postDataHandler}>Add Post</button>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default NewPost;","import React, { Component } from 'react';\r\n\r\nimport './FullPost.css';\r\nimport Axios from 'axios';\r\n\r\nclass FullPost extends Component {\r\n\r\n    state = {\r\n        loadedPost: null\r\n    }\r\n    \r\n\r\n    componentDidMount = () => {\r\n        if (this.props.match.params.id){\r\n            if (!this.state.loadedPost || (this.state.loadedPost && this.state.loadedPost.id !== this.props.id)) {\r\n\r\n                Axios.get('/posts/' + this.props.match.params.id)\r\n                .then(response => {\r\n                    // console.log(response.data);\r\n                    this.setState({loadedPost: response.data});\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    deletePostHandler = () => {\r\n        Axios.delete('/posts/' + this.props.id)\r\n        .then(response => console.log(response));\r\n    }\r\n    render () {\r\n        let post = <p style={{textAlign: \"center\"}}>Please select a Post!</p>;\r\n        if (this.props.match.params.id){\r\n            post = <p style={{textAlign: \"center\"}}>Loading.....!</p>\r\n            \r\n        }\r\n        if (this.state.loadedPost) {\r\n            post = (\r\n                <div className=\"FullPost\">\r\n                    <h1>{this.state.loadedPost.title}</h1>\r\n                    <p>{this.state.loadedPost.body}</p>\r\n                    <div className=\"Edit\">\r\n                        <button onClick={this.deletePostHandler} className=\"Delete\">Delete</button>\r\n                    </div>\r\n                </div>\r\n    \r\n            );\r\n        }\r\n        \r\n        return post;\r\n    }\r\n}\r\n\r\nexport default FullPost;","import React, { Component } from 'react';\r\n\r\nimport './Blog.css';\r\nimport Posts from './Posts/Posts';\r\nimport NewPost from './NewPost/NewPost';\r\nimport FullPost from './FullPost/FullPost';\r\nimport { Route,Switch, NavLink,Redirect } from \"react-router-dom\";\r\n\r\nclass Blog extends Component {\r\n\r\n    state = {\r\n        auth: false\r\n    }\r\n    \r\n\r\n    \r\n    render () {\r\n\r\n        \r\n        return (\r\n            <div className=\"Blog\">\r\n                <header>\r\n                    <nav>\r\n                        <ul>\r\n                            <li>\r\n                            <NavLink\r\n                                to=\"/\"\r\n                                exact\r\n                                activeClassName=\"my-active\"\r\n                                activeStyle={{\r\n                                    color: '#fa923f',\r\n                                    textDecoration: 'underline'\r\n                                }}>Posts</NavLink>\r\n                                </li>\r\n                            <li><NavLink to={{\r\n                                pathname: '/new-post',\r\n                                hash: '#submit',\r\n                                search: '?quick-submit=true'\r\n                            }}>New Post</NavLink></li>\r\n                        </ul>\r\n                    </nav>\r\n                </header>\r\n                {/* <Route path='/' exact render={() => <h1>HOME</h1>} />\r\n                <Route path='/'   render={() => <h1>HOME  23</h1>} /> */}\r\n                {/* <Route path='/' exact component={Posts} /> */}\r\n\r\n                <Switch>\r\n                    {this.state.auth ? <Route path=\"/new-post\" component={NewPost} />: null }\r\n                 \r\n                <Route path=\"/posts\" component={Posts} />\r\n                <Route path=\"/post/:id\" exact component={FullPost} />\r\n                <Redirect from=\"/\" to=\"/posts\" />\r\n                <Route render={() => <h1>Not Found</h1>} />\r\n\r\n                </Switch>\r\n                \r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Blog;","import React, { Component } from 'react';\nimport {HashRouter } from \"react-router-dom\";\n\n\nimport Blog from './containers/Blog/Blog';\n\nclass App extends Component {\n  render() {\n    return (\n      // <BrowserRouter basename=\"/my-app\"></BrowserRouter>\n      <HashRouter>\n      <div className=\"App\">\n        <Blog />\n      </div>\n      </HashRouter>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport Axios from 'axios';\n\n\nAxios.defaults.baseURL = 'https://jsonplaceholder.typicode.com';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}